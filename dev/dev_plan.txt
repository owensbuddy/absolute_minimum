
Immediate to-do: 
		Subreddit Data Collection: Complete fetch_subreddit_info.py for subreddit attributes.
		User Data Collection: Finish fetch_user_info.py to gather user account and moderation details.
		ETL Process: Finalize ETL steps for consistency and accuracy in data structure.




dev_guide.txt

WGU Reddit Social Media Management Tool Development Guide

Project Overview

This project manages and analyzes discussions about WGU across 52 WGU-related subreddits. The database stores essential data about posts, comments, users, and subreddits, enabling data retrieval for insights and allowing WGU to better understand community engagement.

Goals

	1.	Establish a comprehensive database to store relevant Reddit data across the following tables:
	•	Subreddits: Stores details about each WGU-related subreddit.
	•	Users: Contains user information, including moderation activity.
	•	Posts: Stores post data, including post ID, subreddit, title, score, author, created date, comments count, and content.
	•	Comments: Contains hierarchical comment data, with a parent_id column to keep nested replies.
	2.	Set up main scripts to automate data retrieval, updates, and inspection:
	•	initialize_database.py: Defines tables and sets up the database schema.
	•	update_database.py: Updates the database daily with recent posts and comments.
	•	fetch_subreddit_info.py: Collects subreddit-specific data like subscriber count, active users, and description.
	•	fetch_user_info.py: Gathers user details, including moderator roles and user metrics.
	•	show_files_db.py: Outputs the database structure and file trees in a condensed format suitable for sharing.
	3.	Implement data categorization for posts, allowing analysis by topic. Initially, categorization will be manual, with machine learning-based categorization planned for future versions.
	4.	Develop a dashboard view for each table (posts, comments, users, subreddits), starting with basic metrics and expanding as needed.

Database Setup and Structure

	1.	Database Initialization
	•	Create the SQLite database and set up tables as outlined under “Goals.”
	•	Script: initialize_database.py to handle database creation, table setup, and schema verification.
	•	Status: Done
	2.	Comments Table Issue
	•	The original comments table design mistakenly used post_id instead of parent_id, causing comments and replies to be flattened. To address this:
	•	New Table: A corrected table, comments_new, now maintains a nested comment structure.
	•	Updated Scripts: All scripts now use comments_new to keep comments properly nested.
	•	Status: Done
	3.	Subreddit Moderators
	•	Moderators: Gather moderator information for each subreddit, adding these users to the Users table with a column for subreddits_moderated. If necessary, create a moderators table to link users to subreddits they moderate.
	•	Status: To Do

Data Retrieval and Collection

	1.	Data Sources
	•	Data is collected from Reddit using two methods:
	•	Posts Only: For general data on posts within each subreddit.
	•	Posts and Comments: For a detailed view, including nested discussions and user interactions within each post.
	2.	Data Collection Scripts
	•	Daily Update Script: update_database.py
	•	Run this script daily to retrieve the latest posts and comments across the 52 subreddits and update the database.
	•	Status: Done
	•	Subreddit Data Script: fetch_subreddit_info.py
	•	Collects data on subreddit attributes like subscriber count, active users, and description.
	•	Status: To Do
	•	User Data Script: fetch_user_info.py
	•	Collects user data, including account activity and list of moderated subreddits.
	•	Status: To Do
	•	Database Inspection Script: show_files_db.py
	•	Outputs the current database structure and file tree in a condensed, shareable format, enabling quick overviews.
	•	Status: Done
	3.	Data Collection Flow
	•	ETL (Extract, Transform, Load):
	•	Extract data from the Reddit API.
	•	Transform data to ensure consistency and accuracy (e.g., ensure the nested structure in comments_new).
	•	Load data into the appropriate tables in the SQLite database.
	•	Status: In Progress

Dashboard Development

	1.	Dashboard Views
	•	Each table (subreddits, users, posts, comments) requires a dashboard view for analysis. Start with simple metrics, then expand to more detailed insights:
	•	Subreddits View: Track subscriber count, active users, and post volume over time.
	•	Users View: Show top contributors, frequency of posts/comments, and moderation activity.
	•	Posts View: Display engagement metrics, including categorization.
	•	Comments View: Analyze nested comments and replies per post.
	•	Status: To Do
	2.	Categorization of Posts
	•	Implement initial manual categorization of posts by topic.
	•	Plan for future categorization using machine learning techniques to automate topic recognition.
	•	Status: In Progress (Manual); Future Work (Machine Learning)

Development To-Do List

	•	Database Initialization: Complete — verified structure, setup, and schema with initialize_database.py.
	•	Comment Hierarchy Fix: Complete — added comments_new table with updated scripts for proper nesting.
	•	Subreddit Moderators: Pending — gather and add moderator information to Users table or a separate moderators table if needed.
	•	Daily Update Script: Complete — update_database.py for daily updates on posts and comments.
	•	Data Collection Scripts:
	•	Subreddit Data: Pending — finalize fetch_subreddit_info.py.
	•	User Data: Pending — finalize fetch_user_info.py.
	•	Database Inspection: Complete — show_files_db.py outputs structure and file tree.
	•	ETL Process: In Progress — document and finalize Extract, Transform, Load steps.
	•	Dashboard Development: Pending — create views for subreddits, users, posts, and comments.
	•	Post Categorization:
	•	Manual Categorization: In Progress.
	•	Machine Learning Categorization: Future Work.